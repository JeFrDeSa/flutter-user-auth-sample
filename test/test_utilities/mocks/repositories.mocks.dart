// Mocks generated by Mockito 5.2.0 from annotations
// in u_auth/test/test_utilities/mocks/repositories.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:u_auth/core/errors/failures/failures.dart' as _i5;
import 'package:u_auth/core/features/user_profile_authentication/domain/entities/user_profile.dart'
    as _i6;
import 'package:u_auth/core/features/user_profile_authentication/domain/repository_contract/user_profile_repository_contract.dart'
    as _i3;
import 'package:u_auth/core/utilities/constants.dart' as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [UserProfileRepositoryContract].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProfileRepositoryContract extends _i1.Mock
    implements _i3.UserProfileRepositoryContract {
  MockUserProfileRepositoryContract() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.MyFailures, _i6.UserProfile>> loadAuthData(
          {String? identifier}) =>
      (super.noSuchMethod(
              Invocation.method(#loadAuthData, [], {#identifier: identifier}),
              returnValue:
                  Future<_i2.Either<_i5.MyFailures, _i6.UserProfile>>.value(
                      _FakeEither_0<_i5.MyFailures, _i6.UserProfile>()))
          as _i4.Future<_i2.Either<_i5.MyFailures, _i6.UserProfile>>);
  @override
  _i4.Future<_i2.Either<_i5.MyFailures, _i6.UserProfile>> storeAuthData(
          {String? identifier, String? passwordHash}) =>
      (super.noSuchMethod(
              Invocation.method(#storeAuthData, [],
                  {#identifier: identifier, #passwordHash: passwordHash}),
              returnValue:
                  Future<_i2.Either<_i5.MyFailures, _i6.UserProfile>>.value(
                      _FakeEither_0<_i5.MyFailures, _i6.UserProfile>()))
          as _i4.Future<_i2.Either<_i5.MyFailures, _i6.UserProfile>>);
  @override
  _i4.Future<_i2.Either<_i5.MyFailures, _i7.NoParams>>
      preloadUserProfileData() =>
          (super.noSuchMethod(Invocation.method(#preloadUserProfileData, []),
                  returnValue:
                      Future<_i2.Either<_i5.MyFailures, _i7.NoParams>>.value(
                          _FakeEither_0<_i5.MyFailures, _i7.NoParams>()))
              as _i4.Future<_i2.Either<_i5.MyFailures, _i7.NoParams>>);
}
